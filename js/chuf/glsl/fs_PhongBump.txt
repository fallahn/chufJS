/////////////////////////////////////////////////////
// normal map shader with phong specular highlighting
/////////////////////////////////////////////////////

//GLES 2.0 / WebGL

#version 100
precision mediump float;
varying vec2 vTexCoord;
varying vec3 vLightVec;
varying vec3 vEyeVec;

uniform sampler2D uColourMap;
uniform sampler2D uSpecularMap;
uniform sampler2D uNormalMap;

//TODO make light params uniforms
vec3 diffuseColour = vec3(0.8, 0.8, 0.8);
vec3 ambientColour = vec3(0.01, 0.01, 0.01);
vec3 specularColour = vec3(1.0, 1.0, 0.7);
float shininess = 20.0;

void main(void)
{
	vec4 baseColour = texture2D(uColourMap, vTexCoord.xy);
	vec3 bump = normalize(texture2D(uNormalMap, vTexCoord.xy).xyz * 2.0 - 1.0);

	vec3 lightDir = normalize(vLightVec);
	vec3 eyeDir = normalize(vEyeVec);
	vec3 reflectDir = reflect(-lightDir, bump);

	float specAmount = 0.0;
	float diffuseAmount = max(dot(bump, lightDir), 0.0);
	if(diffuseAmount > 0.0)
		specAmount = pow(max(dot(reflectDir, eyeDir), 0.0), shininess) * texture2D(uSpecularMap, vTexCoord.xy).r;

	vec3 finalColour = ambientColour + (baseColour.rgb * diffuseAmount) + (specularColour * specAmount);
	gl_FragColor = vec4(finalColour, baseColour.a);
}
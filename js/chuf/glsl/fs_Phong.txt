//////////////////////////////////////////////////
// default phong shading with optional diffuse map
//////////////////////////////////////////////////

//GLES 1.0 / WebGL

#version 100
precision mediump float;
varying vec2 vTexCoord;
varying vec3 vNormal;
varying vec4 vPosition;
varying vec4 vShadowPosition;

uniform sampler2D uColourMap;
uniform sampler2D uSpecularMap;
uniform sampler2D uShadowMap;

uniform vec3 uLightPosition;
uniform vec3 uAmbientColour;
uniform vec3 uDiffuseColour;
uniform vec3 uSpecularColour;

//float shininess = 128.0; //0 - 255

void main(void)
{
	vec3 lightDir = normalize(uLightPosition - vPosition.xyz);
	vec3 normal = normalize(vNormal);
	vec3 eyeDir = normalize(-vPosition.xyz);
	vec3 reflectDir = reflect(-lightDir, normal);

	float specAmount = 0.0;
	float diffuseAmount = max(dot(normal, lightDir), 0.0);
	if(diffuseAmount > 0.0)
	{
		vec4 specSample = texture2D(uSpecularMap, vTexCoord.xy);
		specAmount = pow(max(dot(reflectDir, eyeDir), 0.0), specSample.g * 255.0) * specSample.r;
	}

	vec4 diffuseColour = texture2D(uColourMap, vTexCoord.xy);
	vec3 finalColour = uAmbientColour + (diffuseColour.rgb * diffuseAmount) + (uSpecularColour * specAmount);

	gl_FragColor = vec4(finalColour, diffuseColour.a);
}